package com.sterlint.util.feed.transfer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.event.Level;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

/**
 * slimed down version of BasicSFTPUtil from 
 *
 */
public final class JschSessionFactory {

    public static final String DEFAULT_PERMISSIONS = "660";
    private static Logger LOG = LoggerFactory.getLogger(JschSessionFactory.class);

    private String user;
    private String host;
    private int port = 22; 							// 22 is the default ssh port but you could configure it to anything
    private String privateKeyFile = null; 			// privateKeyFile is used only if it is set
    private Boolean strictHostKeyChecking = null;  	// by default, do not mess with the current setting
    private String userKnownHostsFile = null;      	// by default, do not set this - but the user could set this to /dev/null to throw away host keys
    private Level logLevel = Level.DEBUG;			// user the setter to override the jsch logging
      
    private String password;
    
    public JschSessionFactory(String host, String privateKeyFile, String user, String password){
    	this(host,privateKeyFile, user);
    	this.password = password;
    }
    
    
    public JschSessionFactory(String host, String privateKeyFile, String user){
    	this.host = host;
    	this.user = user;
    	this.privateKeyFile = privateKeyFile;
    	this.strictHostKeyChecking = false;
    }
    
    
    public ChannelSftp openSftpChannel(){
    	try {
	    	Session session = connect();
	        Channel channel = session.openChannel("sftp");
	        channel.connect();
	        return (ChannelSftp) channel;
    	} catch (Exception e){
    		throw new RuntimeException(e);
    	}
    }
    
    public ChannelExec openExecChannel(){
    	try {
	    	Session session = connect();
	        Channel channel = session.openChannel("exec");
	        channel.connect();
	        return (ChannelExec) channel;
    	} catch (Exception e){
    		throw new RuntimeException(e);
    	}
    }
    
    public Session connect() {

        JSch jsch = new JSch();
        Session session = null;

        try {
            
        	// Use a private key, if any - this would be something like .ssh/id_rsa or .ssh/id_dsa or .ssh/identity
            if (privateKeyFile != null) 
                jsch.addIdentity(privateKeyFile);

            session = jsch.getSession(user, host, port);
            
            
            // Use a password, if any - though it may be preferable to use public key authentication instead, which you do by specifying the path to the private key file
            String preferredAuthentications = null;
            if (privateKeyFile != null) 
            	preferredAuthentications = "publickey";
            if (preferredAuthentications != null) 
            	session.setConfig("PreferredAuthentications", preferredAuthentications);
            

            // You almost certainly want strict host key checking turned off
            if (strictHostKeyChecking != null)
                session.setConfig("StrictHostKeyChecking", strictHostKeyChecking ? "yes" : "no");

            
            // On unix, you can set userKnownHostsFile to "/dev/null" to throw away new host keys
            if (userKnownHostsFile != null)
                session.setConfig("UserKnownHostsFile", userKnownHostsFile);
            

            if(user!=null)
            	session.setPassword(password);
            
            
            session.connect();
            return session;
            
        } catch (JSchException e) {
            LOG.error("Error: ", e);
            throw new RuntimeException(e);
        }
    }
    
    public String getHost() {
        return host;
    }

    public String getUser() {
        return user;
    }

    public int getPort() {
        return port;
    }

    public String getPrivateKeyFile() {
        return privateKeyFile;
    }

    public Boolean getStrictHostKeyChecking() {
        return strictHostKeyChecking;
    }

    public String getUserKnownHostsFile() {
        return userKnownHostsFile;
    }
    
	public final class JschDebug implements com.jcraft.jsch.Logger {
		public boolean isEnabled(int jcraftLogLevel) {
			return logLevel.equals(jcraftLogLevel);
		}
		public void log(int jcraftLogLevel, String message) {
			LOG.info(message);
		}
	}

	public Level getLogLevel() {
		return logLevel;
	}

	public void setLogLevel(Level logLevel) {
		this.logLevel = logLevel;
	}

	
}
